services:

  # Launch just one coordinator node, not yet HA
  coordinator:
    build:
      context: .
      dockerfile: ./deploy/docker/coordinator.Dockerfile
    ports:
      - "8080:8080"
    networks:
      - dfs-network

  datanode1:
    build:
      context: .
      dockerfile: ./deploy/docker/datanode.Dockerfile
    ports:
      - "8081:8081"
    environment:
      - DATANODE_PORT=8081
      - COORDINATOR_HOST=coordinator
      - COORDINATOR_PORT=8080
      - DATANODE_HOST=datanode1
      - DISK_STORAGE_BASE_DIR=/app
    depends_on:
      coordinator:
        condition: service_started
    networks:
      - dfs-network

  datanode2:
    build:
      context: .
      dockerfile: ./deploy/docker/datanode.Dockerfile
    ports:
      - "8082:8081"
    environment:
      - DATANODE_PORT=8081
      - COORDINATOR_HOST=coordinator
      - COORDINATOR_PORT=8080
      - DATANODE_HOST=datanode2
      - DISK_STORAGE_BASE_DIR=/app
    depends_on:
      coordinator:
        condition: service_started
    networks:
      - dfs-network

  datanode3:
    build:
      context: .
      dockerfile: ./deploy/docker/datanode.Dockerfile
    ports:
      - "8083:8081"
    environment:
      - DATANODE_PORT=8081
      - COORDINATOR_HOST=coordinator
      - COORDINATOR_PORT=8080
      - DATANODE_HOST=datanode3
      - DISK_STORAGE_BASE_DIR=/app
    depends_on:
      coordinator:
        condition: service_started
    networks:
      - dfs-network

  datanode4:
    build:
      context: .
      dockerfile: ./deploy/docker/datanode.Dockerfile
    ports:
      - "8084:8081"
    environment:
      - DATANODE_PORT=8081
      - COORDINATOR_HOST=coordinator
      - COORDINATOR_PORT=8080
      - DATANODE_HOST=datanode4
      - DISK_STORAGE_BASE_DIR=/app
    depends_on:
      coordinator:
        condition: service_started
    networks:
      - dfs-network

  datanode5:
    build:
      context: .
      dockerfile: ./deploy/docker/datanode.Dockerfile
    ports:
      - "8085:8081"
    environment:
      - DATANODE_PORT=8081
      - COORDINATOR_HOST=coordinator
      - COORDINATOR_PORT=8080
      - DATANODE_HOST=datanode5
      - DISK_STORAGE_BASE_DIR=/app
    depends_on:
      coordinator:
        condition: service_started
    networks:
      - dfs-network

  datanode6:
    build:
      context: .
      dockerfile: ./deploy/docker/datanode.Dockerfile
    ports:
      - "8086:8081"
    environment:
      - DATANODE_PORT=8081
      - COORDINATOR_HOST=coordinator
      - COORDINATOR_PORT=8080
      - DATANODE_HOST=datanode6
      - DISK_STORAGE_BASE_DIR=/app
    depends_on:
      coordinator:
        condition: service_started
    networks:
      - dfs-network

  # Test runner service - runs e2e tests against the cluster
  e2e-runner:
    build:
      context: .
      dockerfile: ./deploy/docker/e2e.Dockerfile
    environment:
      - TEST_FILES_DIR=/app/test-files
      - COORDINATOR_HOST=coordinator
      - COORDINATOR_PORT=8080
      - ENVIRONMENT=development
      - LOG_LEVEL=info
      - DEBUG=${DEBUG_E2E_TESTS:-false}
    depends_on:
      - coordinator
      - datanode1
      - datanode2
      - datanode3
      - datanode4
      - datanode5
      - datanode6
    networks:
      - dfs-network
    volumes:
      - ./tests/e2e/coverage:/app/coverage
    tmpfs: #Store test files in RAM to avoid disk I/O and SSD wear
      - /app/test-files:size=2G
    ports:
      - "2345:2345"

networks:
  dfs-network:
    driver: bridge