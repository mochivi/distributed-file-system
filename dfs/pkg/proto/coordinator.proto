syntax = "proto3";

package dfs;

option go_package = "pkg/proto";

import "common.proto";
import "google/protobuf/timestamp.proto";

service CoordinatorService {
  // File operations
  rpc UploadFile(UploadRequest) returns (UploadResponse);
  rpc DownloadFile(DownloadRequest) returns (DownloadResponse);
  rpc DeleteFile(DeleteRequest) returns (DeleteResponse);
  rpc ListFiles(ListRequest) returns (ListResponse);
  
  // Node management
  rpc RegisterDataNode(RegisterDataNodeRequest) returns (RegisterDataNodeResponse);
  rpc DataNodeHeartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse);
}

// Upload file request/response
message UploadRequest {
  string path = 1;
  int64 size = 2;
  int64 chunk_size = 3;
  string checksum = 4;
}
message UploadResponse {
  repeated ChunkLocation chunk_locations = 1;
}

message ChunkLocation {
  string chunk_id = 1;
  string node_id = 2;
  string endpoint = 3;
}

// Download file request/response
message DownloadRequest {
  string path = 1;
}
message DownloadResponse {
  FileInfo file_info = 1;
  repeated ChunkLocation chunk_locations = 2;
}

// Delete file request/response
message DeleteRequest {
  string path = 1;
}
message DeleteResponse {
  bool success = 1;
  string message = 2;
}

// List files request/response
message ListRequest {
  string directory = 1;
}
message ListResponse {
  repeated FileInfo files = 1;
}

// Node management
message RegisterDataNodeRequest {
  DataNodeInfo node_info = 1;
}
message RegisterDataNodeResponse {
  bool success = 1;
  string message = 2;

  // Initial full snapshot of all nodes
  repeated DataNodeInfo full_node_list = 3;

  // Current version to track incremental updates
  int64 current_version = 4;
}

message HeartbeatRequest {
  string node_id = 1;
  HealthStatus status = 2;

  // For node status updates, provide last seen version
  int64 last_seen_version = 3;
}
message HeartbeatResponse {
  bool success = 1;
  string message = 2;
  // Incremental updates since last_seen_version
  repeated NodeUpdate updates = 3;
  // Version range for these updates
  int64 from_version = 4;
  int64 to_version = 5;
  // Flag indicating if full resync is needed (e.g., version too old)
  bool requires_full_resync = 6;
}

message ListNodesRequest {}

message ListNodesResponse {
  repeated DataNodeInfo nodes = 1;
  int64 current_version = 2;
}

message NodeUpdate {
  enum UpdateType {
    NODE_ADDED = 0;
    NODE_REMOVED = 1;
    NODE_UPDATED = 2;
  }

  // Monotonic version number for ordering
  int64 version = 1;
  UpdateType type = 2;
  DataNodeInfo node = 3;

  // Timestamp for debugging/monitoring
  google.protobuf.Timestamp timestamp = 4;
}