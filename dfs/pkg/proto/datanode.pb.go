// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: datanode.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Hand-shake from uploader peer (client or other DataNode)
type ChunkMeta struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	ChunkId   string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	ChunkSize int64                  `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	Checksum  string                 `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// true  => receiver must replicate further (uploader is a client -> primary)
	// false => receiver just stores the chunk (uploader is another DataNode)
	Propagate     bool `protobuf:"varint,4,opt,name=propagate,proto3" json:"propagate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkMeta) Reset() {
	*x = ChunkMeta{}
	mi := &file_datanode_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkMeta) ProtoMessage() {}

func (x *ChunkMeta) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkMeta.ProtoReflect.Descriptor instead.
func (*ChunkMeta) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkMeta) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ChunkMeta) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *ChunkMeta) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *ChunkMeta) GetPropagate() bool {
	if x != nil {
		return x.Propagate
	}
	return false
}

type NodeReady struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accept        bool                   `protobuf:"varint,1,opt,name=accept,proto3" json:"accept,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SessionId     string                 `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeReady) Reset() {
	*x = NodeReady{}
	mi := &file_datanode_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeReady) ProtoMessage() {}

func (x *NodeReady) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeReady.ProtoReflect.Descriptor instead.
func (*NodeReady) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{1}
}

func (x *NodeReady) GetAccept() bool {
	if x != nil {
		return x.Accept
	}
	return false
}

func (x *NodeReady) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NodeReady) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// PrepareChunkDownload request/response
type DownloadChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadChunkRequest) Reset() {
	*x = DownloadChunkRequest{}
	mi := &file_datanode_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChunkRequest) ProtoMessage() {}

func (x *DownloadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChunkRequest.ProtoReflect.Descriptor instead.
func (*DownloadChunkRequest) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{2}
}

func (x *DownloadChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type DownloadStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadStreamRequest) Reset() {
	*x = DownloadStreamRequest{}
	mi := &file_datanode_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadStreamRequest) ProtoMessage() {}

func (x *DownloadStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadStreamRequest.ProtoReflect.Descriptor instead.
func (*DownloadStreamRequest) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{3}
}

func (x *DownloadStreamRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Delete chunk request/response
type DeleteChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunkRequest) Reset() {
	*x = DeleteChunkRequest{}
	mi := &file_datanode_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkRequest) ProtoMessage() {}

func (x *DeleteChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkRequest.ProtoReflect.Descriptor instead.
func (*DeleteChunkRequest) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type DeleteChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunkResponse) Reset() {
	*x = DeleteChunkResponse{}
	mi := &file_datanode_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkResponse) ProtoMessage() {}

func (x *DeleteChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkResponse.ProtoReflect.Descriptor instead.
func (*DeleteChunkResponse) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteChunkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ChunkDataStream struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SessionId       string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ChunkId         string                 `protobuf:"bytes,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Data            []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                              // Chunk of the actual data
	Offset          int64                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`                                         // Byte offset in the full chunk
	IsFinal         bool                   `protobuf:"varint,5,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`                        // True for the last chunk
	PartialChecksum string                 `protobuf:"bytes,6,opt,name=partial_checksum,json=partialChecksum,proto3" json:"partial_checksum,omitempty"` // Optional: checksum of this data segment
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ChunkDataStream) Reset() {
	*x = ChunkDataStream{}
	mi := &file_datanode_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkDataStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkDataStream) ProtoMessage() {}

func (x *ChunkDataStream) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkDataStream.ProtoReflect.Descriptor instead.
func (*ChunkDataStream) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{6}
}

func (x *ChunkDataStream) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChunkDataStream) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ChunkDataStream) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChunkDataStream) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ChunkDataStream) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *ChunkDataStream) GetPartialChecksum() string {
	if x != nil {
		return x.PartialChecksum
	}
	return ""
}

type ChunkDataAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	BytesReceived int64                  `protobuf:"varint,4,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"` // Total bytes received so far
	ReadyForNext  bool                   `protobuf:"varint,5,opt,name=ready_for_next,json=readyForNext,proto3" json:"ready_for_next,omitempty"`  // Flow control: ready for next chunk
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkDataAck) Reset() {
	*x = ChunkDataAck{}
	mi := &file_datanode_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkDataAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkDataAck) ProtoMessage() {}

func (x *ChunkDataAck) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkDataAck.ProtoReflect.Descriptor instead.
func (*ChunkDataAck) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{7}
}

func (x *ChunkDataAck) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChunkDataAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChunkDataAck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChunkDataAck) GetBytesReceived() int64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *ChunkDataAck) GetReadyForNext() bool {
	if x != nil {
		return x.ReadyForNext
	}
	return false
}

// Health check request/response
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_datanode_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{8}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *HealthStatus          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_datanode_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{9}
}

func (x *HealthCheckResponse) GetStatus() *HealthStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_datanode_proto protoreflect.FileDescriptor

const file_datanode_proto_rawDesc = "" +
	"\n" +
	"\x0edatanode.proto\x12\x03dfs\x1a\fcommon.proto\"\x7f\n" +
	"\tChunkMeta\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x02 \x01(\x03R\tchunkSize\x12\x1a\n" +
	"\bchecksum\x18\x03 \x01(\tR\bchecksum\x12\x1c\n" +
	"\tpropagate\x18\x04 \x01(\bR\tpropagate\"\\\n" +
	"\tNodeReady\x12\x16\n" +
	"\x06accept\x18\x01 \x01(\bR\x06accept\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"session_id\x18\x03 \x01(\tR\tsessionId\"1\n" +
	"\x14DownloadChunkRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\"6\n" +
	"\x15DownloadStreamRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"/\n" +
	"\x12DeleteChunkRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\"I\n" +
	"\x13DeleteChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xbd\x01\n" +
	"\x0fChunkDataStream\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x19\n" +
	"\bchunk_id\x18\x02 \x01(\tR\achunkId\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x12\x16\n" +
	"\x06offset\x18\x04 \x01(\x03R\x06offset\x12\x19\n" +
	"\bis_final\x18\x05 \x01(\bR\aisFinal\x12)\n" +
	"\x10partial_checksum\x18\x06 \x01(\tR\x0fpartialChecksum\"\xae\x01\n" +
	"\fChunkDataAck\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12%\n" +
	"\x0ebytes_received\x18\x04 \x01(\x03R\rbytesReceived\x12$\n" +
	"\x0eready_for_next\x18\x05 \x01(\bR\freadyForNext\"\x14\n" +
	"\x12HealthCheckRequest\"@\n" +
	"\x13HealthCheckResponse\x12)\n" +
	"\x06status\x18\x01 \x01(\v2\x11.dfs.HealthStatusR\x06status2\x9b\x03\n" +
	"\x0fDataNodeService\x124\n" +
	"\x12PrepareChunkUpload\x12\x0e.dfs.ChunkMeta\x1a\x0e.dfs.NodeReady\x12A\n" +
	"\x14PrepareChunkDownload\x12\x19.dfs.DownloadChunkRequest\x1a\x0e.dfs.NodeReady\x12@\n" +
	"\x11UploadChunkStream\x12\x14.dfs.ChunkDataStream\x1a\x11.dfs.ChunkDataAck(\x010\x01\x12I\n" +
	"\x13DownloadChunkStream\x12\x1a.dfs.DownloadStreamRequest\x1a\x14.dfs.ChunkDataStream0\x01\x12@\n" +
	"\vDeleteChunk\x12\x17.dfs.DeleteChunkRequest\x1a\x18.dfs.DeleteChunkResponse\x12@\n" +
	"\vHealthCheck\x12\x17.dfs.HealthCheckRequest\x1a\x18.dfs.HealthCheckResponseB\vZ\tpkg/protob\x06proto3"

var (
	file_datanode_proto_rawDescOnce sync.Once
	file_datanode_proto_rawDescData []byte
)

func file_datanode_proto_rawDescGZIP() []byte {
	file_datanode_proto_rawDescOnce.Do(func() {
		file_datanode_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datanode_proto_rawDesc), len(file_datanode_proto_rawDesc)))
	})
	return file_datanode_proto_rawDescData
}

var file_datanode_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_datanode_proto_goTypes = []any{
	(*ChunkMeta)(nil),             // 0: dfs.ChunkMeta
	(*NodeReady)(nil),             // 1: dfs.NodeReady
	(*DownloadChunkRequest)(nil),  // 2: dfs.DownloadChunkRequest
	(*DownloadStreamRequest)(nil), // 3: dfs.DownloadStreamRequest
	(*DeleteChunkRequest)(nil),    // 4: dfs.DeleteChunkRequest
	(*DeleteChunkResponse)(nil),   // 5: dfs.DeleteChunkResponse
	(*ChunkDataStream)(nil),       // 6: dfs.ChunkDataStream
	(*ChunkDataAck)(nil),          // 7: dfs.ChunkDataAck
	(*HealthCheckRequest)(nil),    // 8: dfs.HealthCheckRequest
	(*HealthCheckResponse)(nil),   // 9: dfs.HealthCheckResponse
	(*HealthStatus)(nil),          // 10: dfs.HealthStatus
}
var file_datanode_proto_depIdxs = []int32{
	10, // 0: dfs.HealthCheckResponse.status:type_name -> dfs.HealthStatus
	0,  // 1: dfs.DataNodeService.PrepareChunkUpload:input_type -> dfs.ChunkMeta
	2,  // 2: dfs.DataNodeService.PrepareChunkDownload:input_type -> dfs.DownloadChunkRequest
	6,  // 3: dfs.DataNodeService.UploadChunkStream:input_type -> dfs.ChunkDataStream
	3,  // 4: dfs.DataNodeService.DownloadChunkStream:input_type -> dfs.DownloadStreamRequest
	4,  // 5: dfs.DataNodeService.DeleteChunk:input_type -> dfs.DeleteChunkRequest
	8,  // 6: dfs.DataNodeService.HealthCheck:input_type -> dfs.HealthCheckRequest
	1,  // 7: dfs.DataNodeService.PrepareChunkUpload:output_type -> dfs.NodeReady
	1,  // 8: dfs.DataNodeService.PrepareChunkDownload:output_type -> dfs.NodeReady
	7,  // 9: dfs.DataNodeService.UploadChunkStream:output_type -> dfs.ChunkDataAck
	6,  // 10: dfs.DataNodeService.DownloadChunkStream:output_type -> dfs.ChunkDataStream
	5,  // 11: dfs.DataNodeService.DeleteChunk:output_type -> dfs.DeleteChunkResponse
	9,  // 12: dfs.DataNodeService.HealthCheck:output_type -> dfs.HealthCheckResponse
	7,  // [7:13] is the sub-list for method output_type
	1,  // [1:7] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_datanode_proto_init() }
func file_datanode_proto_init() {
	if File_datanode_proto != nil {
		return
	}
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datanode_proto_rawDesc), len(file_datanode_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_datanode_proto_goTypes,
		DependencyIndexes: file_datanode_proto_depIdxs,
		MessageInfos:      file_datanode_proto_msgTypes,
	}.Build()
	File_datanode_proto = out.File
	file_datanode_proto_goTypes = nil
	file_datanode_proto_depIdxs = nil
}
