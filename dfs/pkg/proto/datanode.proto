syntax = "proto3";

package dfs;

option go_package = "pkg/proto";

import "common.proto";

service DataNodeService {
  // Hand-shake definitions from uploader (client or other DataNode)
  // All operations follow a 2 step protocol -> first prepare -> stream data
  rpc PrepareChunkUpload(ChunkMeta) returns (ChunkUploadReady);

  // Chunk operations
  rpc RetrieveChunk(RetrieveChunkRequest) returns (RetrieveChunkResponse);
  rpc DeleteChunk(DeleteChunkRequest) returns (DeleteChunkResponse);

  // Receiving chunk data from stream
  rpc StreamChunk(stream ChunkDataStream) returns (stream ChunkDataAck);
  
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Hand-shake from uploader (client or other DataNode)
message ChunkMeta {
  string chunk_id   = 1;
  int64  chunk_size = 2;
  string checksum   = 3;

  // true  => receiver must replicate further (uploader is a client -> primary)
  // false => receiver just stores the chunk (uploader is another DataNode)
  bool    propagate = 4;
}

message ChunkUploadReady {
  bool   accept     = 1;
  string message    = 2;
  string session_id = 3;
}

// Retrieve chunk request/response
message RetrieveChunkRequest {
  string chunk_id = 1;
}
message RetrieveChunkResponse {
  bytes data = 1;
  string checksum = 2;
}

// Delete chunk request/response
message DeleteChunkRequest {
  string chunk_id = 1;
}
message DeleteChunkResponse {
  bool success = 1;
  string message = 2;
}


message ChunkDataStream {
  string session_id = 1;
  string chunk_id = 2;
  bytes data = 3;                 // Chunk of the actual data
  int64 offset = 4;               // Byte offset in the full chunk
  bool is_final = 5;              // True for the last chunk
  string partial_checksum = 6;    // Optional: checksum of this data segment
}
message ChunkDataAck {
  string session_id = 1;
  bool success = 2;
  string message = 3;
  int64 bytes_received = 4;       // Total bytes received so far
  bool ready_for_next = 5;        // Flow control: ready for next chunk
}

// Health check request/response
message HealthCheckRequest {}
message HealthCheckResponse {
  HealthStatus status = 1;
}