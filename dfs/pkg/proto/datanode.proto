syntax = "proto3";

package dfs;

option go_package = "pkg/proto";

import "common.proto";

service DataNodeService {
  // Hand-shake definitions from peer (upload and download, client or other DataNode) 
  // Both operations follow a 2 step protocol: prepare -> stream data
  rpc PrepareChunkUpload(UploadChunkRequest) returns (NodeReady);
  rpc PrepareChunkDownload(DownloadChunkRequest) returns (DownloadReady);

  // Bidirectional stream for uploading chunk data to a node.
  // The client streams data, the server streams back acknowledgements.
  rpc UploadChunkStream(stream ChunkDataStream) returns (stream ChunkDataAck);
  
  // Server-side stream for downloading chunk data from a node.
  // The client sends a single request, the server streams back data.
  rpc DownloadChunkStream(DownloadStreamRequest) returns (stream ChunkDataStream);

  // Unary operation to delete a chunk
  rpc DeleteChunk(DeleteChunkRequest) returns (DeleteChunkResponse);

  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

message UploadChunkRequest {
  ChunkHeader chunk_header = 1;
  
  // true  => receiver must replicate further (uploader is a client -> primary)
  // false => receiver just stores the chunk (uploader is another DataNode)
  bool propagate = 2;
}

message NodeReady {
  bool   accept     = 1;
  string message    = 2;
  string session_id = 3;
}

message DownloadReady {
  NodeReady ready = 1;
  ChunkHeader chunk_header = 2;
}

// PrepareChunkDownload request/response
message DownloadChunkRequest {
  string chunk_id = 1;
}
message DownloadStreamRequest {
  string session_id = 1;
  int32 chunk_stream_size = 2;
}

// Delete chunk request/response
message DeleteChunkRequest {
  string chunk_id = 1;
}
message DeleteChunkResponse {
  bool success = 1;
  string message = 2;
}

message ChunkDataStream {
  string session_id = 1;
  string chunk_id = 2;
  bytes data = 3;                 // Chunk of the actual data
  int64 offset = 4;               // Byte offset in the full chunk
  bool is_final = 5;              // True for the last chunk
  string partial_checksum = 6;    // Optional: checksum of this data segment
}
message ChunkDataAck {
  string session_id = 1;
  bool success = 2;
  string message = 3;
  int64 bytes_received = 4;       // Total bytes received so far
  bool ready_for_next = 5;        // Flow control: ready for next chunk
  repeated DataNodeInfo replicas = 6; // The last request send out by the server confirms all replica nodes
}

// Health check request/response
message HealthCheckRequest {}
message HealthCheckResponse {
  HealthStatus status = 1;
}